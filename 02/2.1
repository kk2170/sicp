#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.4 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 54 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 1290 0 17 3 11 #";accumulate"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"accumulate"
0 0 23 3 1 #" "
0 0 14 3 2 #"op"
0 0 23 3 1 #" "
0 0 14 3 7 #"initial"
0 0 23 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 23 3 2 #" )"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 14 3 7 #"initial"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 2 #"op"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 10 #"accumulate"
0 0 23 3 1 #" "
0 0 14 3 2 #"op"
0 0 23 3 1 #" "
0 0 14 3 7 #"initial"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 17 3 19 #";enumerate-interval"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 18 #"enumerate-interval"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 1 #" "
0 0 14 3 4 #"high"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 1 #">"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 1 #" "
0 0 14 3 4 #"high"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 20 3 1 #"'"
0 0 23 3 2 #"()"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 2 #" ("
0 0 14 3 18 #"enumerate-interval"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 3 #"low"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #" )"
0 0 14 3 4 #"high"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";Q2.33"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"my-map"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"accumulate"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 2 #")("
0 0 14 3 1 #"x"
0 0 23 3 2 #") "
0 0 14 3 3 #"nil"
0 0 23 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"my-append"
0 0 23 3 1 #" "
0 0 14 3 4 #"seq1"
0 0 23 3 1 #" "
0 0 14 3 4 #"seq2"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"accumulate"
0 0 23 3 1 #" "
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 4 #"seq1"
0 0 23 3 1 #" "
0 0 14 3 4 #"seq2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"my-length"
0 0 23 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"accumulate"
0 0 23 3 1 #" "
0 0 14 3 6 #"length"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 24 #";(my-map * (list 1 2 3))"
0 0 23 29 1 #"\n"
0 0 17 3 38 #";(my-append (list 1 2 3) (list 1 2 3))"
0 0 23 29 1 #"\n"
0 0 17 3 25 #";(my-length (list 1 2 3))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";Q2.34"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"horner-eval"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 20 #"coefficient-sequence"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"accumulate"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 10 #"this-coeff"
0 0 23 3 1 #" "
0 0 14 3 11 #"higer-terms"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 10 #"this-coeff"
0 0 23 3 2 #" ("
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 11 #"higer-terms"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                               "
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 20 3 1 #"0"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"             "
0 0 14 3 20 #"coefficient-sequence"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 11 #"horner-eval"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";Q2.35"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"count-leaves"
0 0 23 3 1 #" "
0 0 14 3 1 #"t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"accumulate"
0 0 23 3 1 #" "
0 0 14 3 1 #"+"
0 0 23 3 2 #"  "
0 0 20 3 1 #"0"
0 0 23 3 2 #" ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 2 #")("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 39 #"                                     (("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #"))"
0 0 20 3 1 #"1"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 38 #"                                     ("
0 0 14 3 4 #"else"
0 0 23 3 1 #"("
0 0 14 3 12 #"count-leaves"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 35 #"                                   "
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                      ))"
0 0 14 3 1 #"t"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"count-leaves"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 4 #" ) ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 4 #" )))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";Q2.36"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"accumulate-n"
0 0 23 3 1 #" "
0 0 14 3 2 #"op"
0 0 23 3 1 #" "
0 0 14 3 4 #"init"
0 0 23 3 1 #" "
0 0 14 3 4 #"seqs"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 4 #"seqs"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 20 3 1 #"`"
0 0 23 3 2 #"()"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 10 #"accumulate"
0 0 23 3 1 #" "
0 0 14 3 2 #"op"
0 0 23 3 1 #" "
0 0 14 3 4 #"init"
0 0 23 3 1 #"("
0 0 14 3 3 #"map"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 2 #")("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #"))"
0 0 14 3 4 #"seqs"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 12 #"           ("
0 0 14 3 12 #"accumulate-n"
0 0 23 3 1 #" "
0 0 14 3 2 #"op"
0 0 23 3 1 #" "
0 0 14 3 4 #"init"
0 0 23 3 2 #" ("
0 0 14 3 3 #"map"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 2 #")("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 3 #")) "
0 0 14 3 4 #"seqs"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 3 #") ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 4 #" ) ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 1 #" "
0 0 20 3 1 #"8"
0 0 23 3 1 #" "
0 0 20 3 1 #"9"
0 0 23 3 4 #" ) ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #" "
0 0 20 3 2 #"11"
0 0 23 3 1 #" "
0 0 20 3 2 #"12"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"accumulate-n"
0 0 23 3 1 #" "
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";Q2.37"
0 0 23 29 1 #"\n"
0 0 17 3 22
(
 #";\344\273\212\345\233\236\343\201\256\350"
 #"\250\210\347\256\227\345\257\276\350\261\241"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"mx"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 2 #")("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 1 #" "
0 0 20 3 1 #"5"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 2 #")("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"6"
0 0 23 3 1 #" "
0 0 20 3 1 #"7"
0 0 23 3 1 #" "
0 0 20 3 1 #"8"
0 0 23 3 1 #" "
0 0 20 3 1 #"9"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 40
(
 #";\345\220\204\350\241\214\345\210\227"
 #"\343\201\256\347\202\271\343\202\222\350\250\210\347\256\227"
 #"\343\201\227\343\201\246\343\201\217\343\202\214\343\202\213"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"dot-product"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"accumulate"
0 0 23 3 1 #" "
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #" ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 1 #"*"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 1 #" "
0 0 14 3 1 #"w"
0 0 23 3 4 #" )))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 15 #"matrix-*-vector"
0 0 23 3 1 #" "
0 0 14 3 1 #"m"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 2 #")("
0 0 14 3 11 #"dot-product"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 4 #"))  "
0 0 14 3 1 #"m"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 15 #"matrix-*-vector"
0 0 23 3 1 #" "
0 0 14 3 2 #"mx"
0 0 23 3 1 #" "
0 0 14 3 1 #"v"
0 0 23 3 2 #" )"
0 0 23 29 1 #"\n"
0 0 17 3 13 #";A (30 56 80)"
0 0 23 29 1 #"\n"
0 0 17 3 42 #";1+4+9+16=30  4+10+18+24=56  6+14+24+36=80"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"transpose"
0 0 23 3 1 #" "
0 0 14 3 3 #"mat"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"accumulate-n"
0 0 23 3 1 #" "
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 4 #"()  "
0 0 14 3 3 #"mat"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"transpose"
0 0 23 3 1 #" "
0 0 14 3 2 #"mx"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 36 #";A ((1 4 6) (2 5 7) (3 6 8) (4 6 9))"
0 0 23 29 1 #"\n"
0 0 17 3 33 #";((1 2 3 4)(4 5 6 6)(6 7 8 9))\343\201\214"
0 0 23 29 1 #"\n"
0 0 17 3 109
(
 #";((1 4 6) (2 5 7 ) (3 6 8"
 #" ) (4 6 9 ))\343\201\256\343\202\210\343\201\206\343\201\253\343"
 #"\201\252\343\202\214\343\201\260\350\211\257\343"
 #"\201\204\343\201\256\343\201\247\346\255\243"
 #"\350\247\243\350\241\214\345\210\227"
 #"\343\202\222\346\233\270\343\201\221\343\201\260\343"
 #"\202\210\343\201\217\345\210\206\343\201\213\343\202\213"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 15 #"matrix-*-matrix"
0 0 23 3 1 #" "
0 0 14 3 1 #"m"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" (("
0 0 14 3 4 #"cols"
0 0 23 3 2 #" ("
0 0 14 3 9 #"transpose"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #"("
0 0 14 3 1 #"x"
0 0 23 3 2 #")("
0 0 14 3 15 #"matrix-*-vector"
0 0 23 3 1 #" "
0 0 14 3 4 #"cols"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 2 #"))"
0 0 14 3 1 #"m"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 15 #"matrix-*-matrix"
0 0 23 3 1 #" "
0 0 14 3 2 #"mx"
0 0 23 3 1 #" "
0 0 14 3 2 #"mx"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 17 3 50 #";A ((27 33 39 43) (60 75 90 100) (82 103 124 138))"
0 0 23 29 1 #"\n"
0 0 17 3 1 #";"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";Q2.38"
0 0 23 29 1 #"\n"
0 0 17 3 40
(
 #"; accumulate\343\202\222fold-"
 #"right\343\201\250\343\201\227\343\201\246\345\256\243\350\250\200"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"fold-right"
0 0 23 3 1 #" "
0 0 14 3 2 #"op"
0 0 23 3 1 #" "
0 0 14 3 7 #"initial"
0 0 23 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 23 3 2 #" )"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 14 3 7 #"initial"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 2 #"op"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 10 #"accumulate"
0 0 23 3 1 #" "
0 0 14 3 2 #"op"
0 0 23 3 1 #" "
0 0 14 3 7 #"initial"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 28
(
 #";\346\234\254\343\201\256\345\256\232\347\276\251\343"
 #"\202\222\343\201\235\343\201\256\343\201\276\343\201\276"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"fold-left"
0 0 23 3 1 #" "
0 0 14 3 2 #"op"
0 0 23 3 1 #" "
0 0 14 3 7 #"initial"
0 0 23 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"iter"
0 0 23 3 1 #" "
0 0 14 3 6 #"result"
0 0 23 3 1 #" "
0 0 14 3 4 #"rest"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 4 #"rest"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"        "
0 0 14 3 6 #"result"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"iter"
0 0 23 3 2 #" ("
0 0 14 3 2 #"op"
0 0 23 3 1 #" "
0 0 14 3 6 #"result"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 4 #"rest"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 4 #"rest"
0 0 23 3 5 #" ))))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"iter"
0 0 23 3 1 #" "
0 0 14 3 7 #"initial"
0 0 23 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 10 #"fold-right"
0 0 23 3 1 #" "
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #"  "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 3 #" ))"
0 0 23 29 1 #"\n"
0 0 17 3 51
(
 #";A3/2 \347\264\204\345\210\206"
 #"\343\201\276\343\201\247\343\201\231"
 #"\343\202\213\343\201\250\343\201\257\346\201\220\343\202\213"
 #"\343\201\271\343\201\227\343\203\273\343\203\273\343\203\273"
) 0 0 23 29 1 #"\n"
0 0 17 3 61
(
 #";\345\217\263\343\201\213\343\202\211\351\240"
 #"\206\347\225\252\343\201\253\350\251\225\344\276"
 #"\241\343\201\225\343\202\214\343\201\246\343\202\2132/3  "
 #"1/ (2/3) = 1* (3/2)"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"fold-left"
0 0 23 3 1 #" "
0 0 14 3 1 #"/"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 3 #" ))"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";A 1/6"
0 0 23 29 1 #"\n"
0 0 17 3 49
(
 #";\345\267\246\343\201\213\343\202\211\351\240"
 #"\206\347\225\252\343\201\253\350\251"
 #"\225\344\276\241\343\201\225\343\202\214\343\201\246\343"
 #"\202\213(1/2)/3=1/6 "
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 10 #"fold-right"
0 0 23 3 1 #" "
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 4 #"() ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 3 #" ))"
0 0 23 29 1 #"\n"
0 0 17 3 16 #";A(1 (2 (3 ())))"
0 0 23 29 1 #"\n"
0 0 17 3 29
(
 #"; \345\217\263\343\201\213\343\202\211\350\251\225"
 #"\344\276\241\343\201\225\343\202\214\343\201\246\343\202\213"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"fold-left"
0 0 23 3 1 #" "
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 4 #"() ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 3 #" ))"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";A (((() 1) 2) 3)"
0 0 23 29 1 #"\n"
0 0 17 3 28
(
 #";\345\267\246\343\201\213\343\202\211\350\251\225\344"
 #"\276\241\343\201\225\343\202\214\343\201\246\343\202\213"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";Q2.39"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 53
(
 #"; reverse-l\343\201\250\345\220\214\343\201\230\347\231\272\346\203"
 #"\263\343\201\240\343\201\221\343\201\251\343\201\223\343"
 #"\202\214\343\201\230\343\202\203\343\201\240\343\202\201"
) 0 0 23 29 1 #"\n"
0 0 17 3 29 #";(define (reverse-r sequence)"
0 0 23 29 1 #"\n"
0 0 17 3 55 #";  (fold-right (lambda (x y)(list y x )) '() sequence))"
0 0 23 29 1 #"\n"
0 0 17 3 27 #";(reverse-r (list 1 2 3 4))"
0 0 23 29 1 #"\n"
0 0 17 3 27 #"; \347\265\220\346\236\234 ((((() 4) 3) 2) 1)"
0 0 23 29 1 #"\n"
0 0 17 3 20
(
 #"; \345\276\214\344\270\200\346\211"
 #"\213\351\226\223\343\201\204\343\202\213"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"reverse-r"
0 0 23 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"fold-right"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 2 #")("
0 0 14 3 6 #"append"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 6 #"()))) "
0 0 20 3 1 #"'"
0 0 23 3 3 #"() "
0 0 15 3 8 #"sequence"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"reverse-r"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 70
(
 #";\344\275\225\343\201\250\343\201\252\343\201"
 #"\217cons\343\201\247y\343\201\250"
 #"x\343\202\222\351\200\206\343\201\253\347"
 #"\271\213\343\201\222\343\201\260\350\211\257\343\201\204\343\201\250"
 #"\347\231\272\346\203\263\343\201\227"
 #"\343\201\246\344\275\234\346\210\220"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"reverse-l"
0 0 23 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 9 #"fold-left"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 2 #")("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 1 #"y"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 4 #" )) "
0 0 20 3 1 #"'"
0 0 23 3 3 #"() "
0 0 15 3 8 #"sequence"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 9 #"reverse-l"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 1 #" "
0 0 20 3 1 #"3"
0 0 23 3 1 #" "
0 0 20 3 1 #"4"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 10 #";(4 3 2 1)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 7 #";filter"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 23 3 1 #" "
0 0 14 3 9 #"predicate"
0 0 23 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 23 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 23 3 2 #" )"
0 0 20 3 1 #"'"
0 0 23 3 3 #"())"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"        (("
0 0 14 3 9 #"predicate"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"         ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 6 #"filter"
0 0 23 3 1 #" "
0 0 14 3 9 #"predicate"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 23 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 23 3 1 #" "
0 0 14 3 9 #"predicate"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";prime"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"prime?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 2 #" ("
0 0 14 3 16 #"smallest-divisor"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";smallest-divisor"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 16 #"smallest-divisor"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 12 #"find-divisor"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"2"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 17 3 14 #";find-divisor "
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 7 #";P71-72"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 1 #"d"
0 0 15 3 5 #"efine"
0 0 23 3 2 #" ("
0 0 14 3 7 #"flatmap"
0 0 23 3 1 #" "
0 0 14 3 4 #"proc"
0 0 23 3 1 #" "
0 0 14 3 3 #"seq"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 9 #"        ("
0 0 14 3 10 #"accumulate"
0 0 23 3 1 #" "
0 0 14 3 6 #"append"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 4 #"() ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 4 #"proc"
0 0 23 3 1 #" "
0 0 14 3 3 #"seq"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 10 #"prime-sum?"
0 0 23 3 1 #" "
0 0 14 3 4 #"pair"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 6 #"prime?"
0 0 23 3 2 #" ("
0 0 14 3 1 #"+"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 4 #"pair"
0 0 23 3 2 #")("
0 0 14 3 4 #"cadr"
0 0 23 3 1 #" "
0 0 14 3 4 #"pair"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 13 #"make-pair-sum"
0 0 23 3 1 #" "
0 0 14 3 4 #"pair"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 4 #"pair"
0 0 23 3 2 #")("
0 0 14 3 4 #"cadr"
0 0 23 3 1 #" "
0 0 14 3 4 #"pair"
0 0 23 3 2 #")("
0 0 14 3 1 #"+"
0 0 23 3 1 #"("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 4 #"pair"
0 0 23 3 2 #")("
0 0 14 3 4 #"cadr"
0 0 23 3 1 #" "
0 0 14 3 4 #"pair"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 15 #"prime-sum-pairs"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 23 3 1 #" "
0 0 14 3 13 #"make-pair-sum"
0 0 23 29 1 #"\n"
0 0 23 3 8 #"       ("
0 0 14 3 6 #"filter"
0 0 23 3 1 #" "
0 0 14 3 10 #"prime-sum?"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 7 #"flatmap"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"i"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 3 #"map"
0 0 23 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 23 3 1 #"("
0 0 14 3 1 #"j"
0 0 23 3 2 #")("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #" "
0 0 14 3 1 #"j"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 18 #"enumerate-interval"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #" ("
0 0 14 3 1 #"-"
0 0 23 3 1 #" "
0 0 14 3 1 #"i"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 18 #"enumerate-interval"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 12 #"permutations"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 6 #"      "
0 0 20 3 1 #"'"
0 0 23 3 2 #"()"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 7 #"flatmap"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 3 #"map"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"p"
0 0 23 3 2 #")("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 3 #" ))"
0 0 23 29 1 #"\n"
0 0 23 3 23 #"                      ("
0 0 14 3 12 #"permutations"
0 0 23 3 2 #" ("
0 0 14 3 6 #"remove"
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 1 #"s"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"               "
0 0 14 3 1 #"s"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"remove"
0 0 23 3 1 #" "
0 0 14 3 4 #"item"
0 0 23 3 1 #" "
0 0 15 3 8 #"sequence"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 6 #"filter"
0 0 23 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 1 #"x"
0 0 23 3 2 #")("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 1 #"="
0 0 23 3 1 #" "
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 4 #"item"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 10 #"          "
0 0 15 3 8 #"sequence"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 15 #"prime-sum-pairs"
0 0 23 3 1 #" "
0 0 20 3 2 #"10"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";Q2.40"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";Q2.41"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 6 #";Q2.42"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0           0
